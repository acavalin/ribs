#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'shellwords'
require 'zlib'
require 'yaml'
#require 'byebug'

$VERBOSE = nil
STDOUT.sync = true

TAR_OPTS  = '--numeric-owner -p'
TAR_COMPR = { 'txz' => '-J', 'tgz' => '-z' } # tar compression switches

# file types skipped/ignored
SKIPPED_FTYPES = %w{ socket unknown characterSpecial blockSpecial } # file directory link fifo
SKIPPED_FOLDERS = %w{ . .. }

def die(msg, exit_code = 0); puts msg; exit exit_code; end

# --- setup options ------------------------------------------------------------
# default options
options = {
  src_dir:  nil,
  dst_dir:  nil,
  one_fs:   false,
  zip_zip:  :xz,
  zip_ext:  :txz,
}

# imposta opzioni da riga di comando
optparser = OptionParser.new do |op|
  op.banner = "USAGE: #{File.basename $0} [switches] <target-folder> <repository-folder>"
  op.on('-b', '--backup'              , "create/update the incremental backup"        ){ options.merge! action: :backup }
  op.on('-r', '--restore'             , "restores the last version of the backup"     ){ options.merge! action: :restore, target: :last }
  op.on('-R', '--restore-ts TIMESTAMP', "restores the specified version of the backup"){|ts| options.merge! action: :restore, target: ts }
  op.on('-l', '--list-ts'             , "show available versions to restore"          ){ options.merge! action: :list_ts }
  op.on('-x', '--one-file-system'     , "don't cross filesystem boundaries"           ){ options.merge! one_fs: true }
  op.on('-g', '--gzip'                , "use gzip instead of xz"                      ){ options.merge! zip_zip: :gzip, zip_ext: :tgz }
  op.on('-G', '--pigz'                , "use pigz instead of xz"                      ){ options.merge! zip_zip: :pigz, zip_ext: :tgz }
  op.on('-h', '--help'                , 'display this help'                           ){ puts op; exit 1 }
end

begin
  optparser.parse! ARGV
rescue OptionParser::ParseError
  die $!, 1
rescue SystemExit
  exit 1
end

options[:src_dir], options[:dst_dir] = ARGV

die(optparser, 1) unless options[:src_dir] && File.exist?(options[:src_dir]) &&
                         options[:dst_dir] && File.exist?(options[:dst_dir]) &&
                         options[:action]

options[:src_dir] = File.expand_path options[:src_dir]
options[:dst_dir] = File.expand_path options[:dst_dir]

options[:src_dev] = File.lstat(options[:src_dir]).dev

# number of chars to trim from beginnin of file names to store them on the DB
options[:src_size]  = options[:src_dir].size
options[:src_size] += 1 if options[:src_dir] != '/'

# --- listing available versions -----------------------------------------------
if options[:action] == :list_ts
  puts Dir.chdir(options[:dst_dir]){ Dir['????-??-??_??-??-??'].sort{|a,b| b<=>a } }
end

# --- performing backup --------------------------------------------------------
if options[:action] == :backup
  # recursively scan folder, build DB, and write log file
  def stat_folder(folder, db, log, options)
    print "#{db.size} files\r"
    
    Dir.entries(folder).each do |f|
      next if SKIPPED_FOLDERS.include?(f)
  
      fp = File.join  folder, f
      s  = File.lstat fp
  
      next if SKIPPED_FTYPES.include?(s.ftype)
  
      fkey = fp[options[:src_size] .. -1] # trim base path
      db[fkey]  = [s.gid, s.uid, s.mode, s.ftype[0], s.size, s.mtime.to_i].join('|')
      db[fkey] += "|#{File.readlink(fp)}" if s.symlink?
  
      log.puts "#{db[fkey]}\t#{fkey}"
  
      STDERR.puts fp.ljust(40) if s.directory? && options[:src_dev] != s.dev
      
      stat_folder(fp, db, log, options) if s.directory? && options[:src_dev] == s.dev
    end
  end # stat_folder
  
  # create base folder in the repository
  cur_ts = File.join options[:dst_dir], Time.now.strftime('%F_%H-%M-%S')
  FileUtils.mkdir_p cur_ts
  
  # populate current data
  cur_db = {} # file_path => stat data
  Zlib::GzipWriter.open(File.join cur_ts, 'stats.dat') do |gz|
    gz.mtime, gz.orig_name = Time.now, 'stats.dat'
    stat_folder options[:src_dir], cur_db, gz, options
    puts "#{cur_db.size} files"
  end
  
  # load previous data from disk
  old_ts = Dir[File.join options[:dst_dir], '????-??-??_??-??-??'].sort[-2..-2]
  old_ts = old_ts.first if old_ts.is_a?(Array)
  old_db = {} # file_path => stat data
  Zlib::GzipReader.open(File.join old_ts, 'stats.dat') do |gz|
    gz.each_line do |line|
      props, name = line.strip.split "\t"
      old_db[name] = props
    end
  end if old_ts
  
  # it's the first backup, do it and exit
  unless old_ts
    Dir.chdir options[:src_dir]
    fdest = File.join(cur_ts, "files.#{options[:zip_ext]}").shellescape
    system "tar #{TAR_OPTS} -cf - . | pv -N archiving -w 40 | #{options[:zip_zip]} -c > #{fdest}"
    exit
  end
  
  # compare the last two DBs
  to_arc = [] # files to archive (different type/size/mtime)
  diffs  = {} # files with different GID/UID/Mode
  skip_dir = nil # skip entries in this folder
  old_db.each do |name, o_props|
    next if skip_dir && name.start_with?("#{skip_dir}/")
    skip_dir = nil
    
    if c_props = cur_db[name]
      o_gid, o_uid, o_mode, o_type, o_size, o_mtime, o_link = o_props.split("|")
      c_gid, c_uid, c_mode, c_type, c_size, c_mtime, c_link = c_props.split("|")

      to_arc << name if "#{o_type}#{c_type}" != 'dd' && "#{o_size}|#{o_mtime}" != "#{c_size}|#{c_mtime}"

      if o_type == c_type
        link_changed = o_link != c_link
        diffs[name] = {}
        diffs[name][:gid ] = c_gid .to_i if o_gid != c_gid || link_changed
        diffs[name][:uid ] = c_uid .to_i if o_uid != c_uid || link_changed
        diffs[name][:mode] = c_mode.to_i if c_type != 'l' && o_mode != c_mode # a link has always 777
        diffs[name][:link] = c_link if link_changed
        diffs.delete name if diffs[name].empty?
      else
        diffs[name] = :rm
        if c_type == 'd'      # typechange: from * to directory
          # avoid archiving files from an already archived parent folder
          cur_db.keys.each{|k| cur_db.delete k if k.start_with?("#{name}/") }
        elsif o_type == 'd'   # typechange: from directory to *
          # do not delete files from an already deleted parent folder
          skip_dir = name
        end
      end
      
      cur_db.delete name
    else
      diffs[name] = :rm
    end
  end
  to_arc += cur_db.keys # add new files
  
  # archive changed/new files
  if to_arc.size > 0
    puts "#{to_arc.size} new/modified files"
    flist = File.join(cur_ts, 'arc-list.tmp')
    fdest = File.join(cur_ts, "files.#{options[:zip_ext]}")
    File.open(flist, 'w'){|f| f.puts to_arc }
    tar_opts = "-C #{options[:src_dir]} -cf - --verbatim-files-from --files-from #{flist.shellescape}"
    system "tar #{TAR_OPTS} #{tar_opts} | pv -N archiving -w 40 | #{options[:zip_zip]} -c > #{fdest}"
    File.unlink flist
  end
  
  # save differences in UID/GID/Mode
  if diffs.size > 0
    puts "#{diffs.size} files removed/attr.changed"
    Zlib::GzipWriter.open(File.join cur_ts, 'diff.ymz') do |gz|
      gz.mtime, gz.orig_name = Time.now, 'diff.yml'
      gz.puts diffs.to_yaml
    end
  end
  
  # remove folder if nothing has changed
  FileUtils.rm_rf(cur_ts) if (to_arc.size + diffs.size) == 0
end # action :backup

# --- performing restore -------------------------------------------------------
if options[:action] == :restore
  versions = Dir[File.join options[:dst_dir], '????-??-??_??-??-??'].sort
  options[:target] = versions.last if options[:target] == :last
  
  die("non existent version [#{options[:target]}]", 2) unless versions.any?{|v| v.end_with? options[:target] }
  
  versions.each do |ver|
    print "#{File.basename(ver)}: "
    
    if fname = Dir[File.join ver, 'diff.ymz'].first
      changes = Zlib::GzipReader.open(fname){|gz| YAML.load gz }
      die("unsupported format!", 4) unless changes.is_a?(Hash)
      print "diff... "
      changes.each do |fname, chg|
        fname = File.join(options[:src_dir], fname)
        die("file not found [#{fname}]", 5) unless File.exist?(fname)
        
        if chg == :rm
          FileUtils.rm_rf fname
        elsif chg.is_a?(Hash)
          if chg[:link]
            File.unlink fname
            File.symlink chg[:link], fname
          end
          if chg[:gid] || chg[:uid]
            chg[:gid] ||= File.lstat(fname).gid
            chg[:uid] ||= File.lstat(fname).uid
            File.lchown chg[:uid], chg[:gid], fname
          end
          File.chmod(chg[:mode], fname) if chg[:mode]
        else
          die "diff instruction unknown [#{chg.inspect}]", 6
        end
      end
    end
    
    if fname = Dir[File.join ver, 'files.???'].first
      die("unsupported compression!", 3) unless tar_compr = TAR_COMPR[fname.split('.').last]
      print "untar... "
      system "tar #{TAR_OPTS} -C #{options[:src_dir]} #{tar_compr} -xf #{fname.shellescape}"
    end
    
    puts ''
    
    break if ver.end_with? options[:target]
  end
end
